//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
                     &kp Q           &kp W           &kp E        &kp R             &kp T          &kp Y            &kp U              &kp I        &kp O            &kp P
                     &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LCTRL D  &mt LEFT_SHIFT F  &kp G          &kp H            &mt RIGHT_SHIFT J  &mt RCTRL K  &mt RIGHT_ALT L  &mt RIGHT_GUI SEMI
&mt CAPSLOCK ESCAPE  &kp Z           &kp X           &kp C        &kp V             &kp B          &kp N            &kp M              &kp COMMA    &kp DOT          &kp FSLH            &kp ENTER
                                                     &kp TAB      &mo 3             &lt 2 SPACE    &lt 3 BACKSPACE  &mo 2              &none
            >;
        };

        game {
            bindings = <
         &kp TAB    &kp Q  &kp W     &kp E   &kp R        &trans  &trans  &trans  &trans  &trans
         &kp LSHFT  &kp A  &kp S     &kp D   &kp F        &trans  &trans  &trans  &trans  &trans
&kp ESC  &kp LCTRL  &kp Z  &kp X     &kp C   &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                           &kp LALT  &trans  &kp SPACE    &trans  &trans  &trans
            >;
        };

        nav_num {
            bindings = <
       &none     &none     &none      &none      &none     &none  &kp HOME        &kp UP_ARROW    &kp END          &none
       &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none     &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none
&none  &none     &none     &none      &none      &none     &none  &kp INS         &none           &kp DEL          &none  &none
                           &trans     &trans     &trans    &none  &none           &none
            >;
        };

        sym_func {
            bindings = <
           &kp ESC        &kp LEFT_BRACE        &kp RIGHT_BRACE        &none             &none             &kp F1   &kp F2           &kp F3   &kp F4   &kp F5
           &kp TAB        &kp LBKT              &kp RBKT               &kp ENTER         &kp BSLH          &kp F6   &kp F7           &kp F8   &kp F9   &kp F10
&kp GRAVE  &kp LESS_THAN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GREATER_THAN  &kp UNDERSCORE    &kp F11  &kp F12          &kp F13  &kp F14  &kp F15  &kp F16
                                                &trans                 &trans            &trans            &none    &kp RIGHT_SHIFT  &none
            >;
        };

        device {
            bindings = <
       &none       &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none             &none    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
       &kp K_MUTE  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp C_PLAY_PAUSE  &none    &none         &none         &none         &none         &none
&none  &none       &none                 &none                 &none             &none    &none         &none         &none         &none         &none         &bt BT_CLR
                                         &none                 &none             &none    &none         &none         &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        device {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
